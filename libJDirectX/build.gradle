dependencies {
   implementation(project(":common"))
}

// JNI header generation
tasks.register('generateJNIHeaders', Exec) {
    dependsOn classes
    dependsOn project(":common").tasks.named("generateJNIHeaders")

    if (rootProject.ext.isMac || rootProject.ext.isLinux) {
        commandLine '/bin/zsh', "${layout.projectDirectory.asFile.absolutePath}/libJDirectxBuild.sh", "${layout.buildDirectory.asFile.get().absolutePath}", "generateJNIHeaders", "${lombokVersion}"
    } else if (rootProject.ext.isLinux) {
        commandLine '/bin/bash', "${layout.projectDirectory.asFile.absolutePath}/libJDirectxBuild.sh", "${layout.buildDirectory.asFile.get().absolutePath}", "generateJNIHeaders", "${lombokVersion}"
    } else if (rootProject.ext.isWindows) {
        commandLine "cmd", "/c", 'libJDirectxBuild.bat', "${layout.buildDirectory.asFile.get().absolutePath}", "generateJNIHeaders", "${lombokVersion}"
    }
}

tasks.register('generateNativeBuild', Exec) {
    dependsOn generateJNIHeaders
    if (rootProject.ext.isWindows) {
        commandLine "cmd", "/c", 'libJDirectxBuild.bat', "${layout.buildDirectory.asFile.get().absolutePath}", "generateNativeBuild", "${lombokVersion}"
    } else if (rootProject.ext.isLinux) {
        commandLine "echo", "No native build support for ${rootProject.ext.osName}"
    } else if (rootProject.ext.isMac) {
        commandLine "echo", "No native build support for ${rootProject.ext.osName}"
    }
}

tasks.register('compileNative', Exec) {
    dependsOn generateNativeBuild
    if (rootProject.ext.isWindows) {
        commandLine "cmd", "/c", 'libJDirectxBuild.bat', "${layout.buildDirectory.asFile.get().absolutePath}", "compileNative", "${lombokVersion}"
    } else if (rootProject.ext.isLinux) {
        commandLine "echo", "No native build support for ${rootProject.ext.osName}"
    } else if (rootProject.ext.isMac) {
        commandLine "echo", "No native build support for ${rootProject.ext.osName}"
    }
}

tasks.build.dependsOn compileNative
tasks.test.dependsOn compileNative

test {
    var nativePaths = [
        "${layout.buildDirectory.asFile.get().absolutePath}/libs/native/Debug/",
        "${layout.buildDirectory.asFile.get().absolutePath}/libs"
    ]
    systemProperty("java.library.path", nativePaths.join(File.pathSeparator))
}
