dependencies {
    api("net.java.dev.jna:jna:${jnaVersion}")
    api("net.java.dev.jna:jna-platform:${jnaVersion}")
    api "io.github.spair:imgui-java-binding:${imguiJavaVersion}"
    // api "io.github.spair:imgui-java-lwjgl3:${imguiJavaVersion}"
    if (rootProject.ext.isMac) {
        api "io.github.spair:imgui-java-natives-macos:${imguiJavaVersion}"
    } else if (rootProject.ext.isLinux) {
        api "io.github.spair:imgui-java-natives-linux:${imguiJavaVersion}"
    } else if (rootProject.ext.isWindows) {
        api "io.github.spair:imgui-java-natives-windows:${imguiJavaVersion}"
    }
}

tasks.register('buildBgfx', Exec) {
    if (rootProject.ext.isMac) {
        commandLine '/bin/zsh', "${rootProject.ext.externalBuildScript}", "buildBgfx"
    } else if (rootProject.ext.isLinux) {
        commandLine '/bin/bash', "${rootProject.ext.externalBuildScript}", "buildBgfx"
    } else if (rootProject.ext.isWindows) {
        commandLine "cmd", "/c", "${rootProject.ext.externalBuildScript}", "buildBgfx"
    }
}

tasks.register('cleanBgfx', Exec) {
    if (rootProject.ext.isMac) {
        commandLine '/bin/zsh', "${rootProject.ext.externalBuildScript}", "cleanBgfx"
    } else if (rootProject.ext.isLinux) {
        commandLine '/bin/bash', "${rootProject.ext.externalBuildScript}", "cleanBgfx"
    } else if (rootProject.ext.isWindows) {
        commandLine "cmd", "/c", "${rootProject.ext.externalBuildScript}", "cleanBgfx"
    }
}

// JNI header generation
tasks.register('generateJNIHeaders', Exec) {
    dependsOn classes
    mustRunAfter classes
    if (rootProject.ext.isMac) {
        commandLine '/bin/zsh', "${layout.projectDirectory.asFile.absolutePath}/build.sh", "${layout.buildDirectory.asFile.get().absolutePath}", "generateJNIHeaders", "${lombokVersion}", "${jnaVersion}"
    } else if (rootProject.ext.isLinux) {
        commandLine '/bin/bash', "${layout.projectDirectory.asFile.absolutePath}/build.sh", "${layout.buildDirectory.asFile.get().absolutePath}", "generateJNIHeaders", "${lombokVersion}", "${jnaVersion}"
    } else if (rootProject.ext.isWindows) {
        commandLine "cmd", "/c", "${layout.projectDirectory.asFile.absolutePath}\\build.bat", "${layout.buildDirectory.asFile.get().absolutePath}", "generateJNIHeaders", "${lombokVersion}", "${jnaVersion}"
    } else {
        commandLine "echo", "No native build support for ${rootProject.ext.osName}"
    }
}

// CMake + native build
tasks.register('generateNativeBuild', Exec) {
    dependsOn generateJNIHeaders
    mustRunAfter generateJNIHeaders
    if (rootProject.ext.isMac) {
        commandLine '/bin/zsh', "${layout.projectDirectory.asFile.absolutePath}/build.sh", "${layout.buildDirectory.asFile.get().absolutePath}", "generateNativeBuild", "${lombokVersion}", "${jnaVersion}"
    } else if (rootProject.ext.isLinux) {
        commandLine '/bin/bash', "${layout.projectDirectory.asFile.absolutePath}/build.sh", "${layout.buildDirectory.asFile.get().absolutePath}", "generateNativeBuild", "${lombokVersion}", "${jnaVersion}"
    } else if (rootProject.ext.isWindows) {
        commandLine "cmd", "/c", "${layout.projectDirectory.asFile.absolutePath}\\build.bat", "${layout.buildDirectory.asFile.get().absolutePath}", "generateNativeBuild", "${lombokVersion}", "${jnaVersion}"
    }
}

tasks.register('compileNative', Exec) {
    dependsOn generateNativeBuild
    mustRunAfter generateNativeBuild
    if (rootProject.ext.isMac) {
        commandLine '/bin/zsh', "${layout.projectDirectory.asFile.absolutePath}/build.sh", "${layout.buildDirectory.asFile.get().absolutePath}", "compileNative", "${lombokVersion}", "${jnaVersion}"
    } else if (rootProject.ext.isLinux) {
        commandLine '/bin/bash', "${layout.projectDirectory.asFile.absolutePath}/build.sh", "${layout.buildDirectory.asFile.get().absolutePath}", "compileNative", "${lombokVersion}", "${jnaVersion}"
    } else if (rootProject.ext.isWindows) {
        commandLine "cmd", "/c", "${layout.projectDirectory.asFile.absolutePath}\\build.bat", "${layout.buildDirectory.asFile.get().absolutePath}", "compileNative", "${lombokVersion}", "${jnaVersion}"
    }
}

tasks.build.mustRunAfter buildBgfx
tasks.test.mustRunAfter buildBgfx
tasks.test.mustRunAfter compileNative

tasks.register('runTest', JavaExec) {
    dependsOn build
    mustRunAfter build
    dependsOn compileNative
    mustRunAfter compileNative

    // You can print the platform and architecture to verify
    println "Platform: $platform, Architecture: $arch"

    mainClass.set('tech.lib.bgfx.TestBgfx')
    classpath = sourceSets.main.runtimeClasspath
    if (rootProject.ext.platform == "windows") {
        jvmArgs = ["-Djava.library.path=" +
           "${layout.buildDirectory.asFile.get().absolutePath}/libs;" +
           "${rootProject.layout.projectDirectory.asFile.absolutePath}/external/bgfx/.build/win64_vs2022/bin"
        ]
    } else if (rootProject.ext.platform == "osx") {
        jvmArgs = ["-Djava.library.path=" +
           "${layout.buildDirectory.asFile.get().absolutePath}/libs:" +
           "${rootProject.layout.projectDirectory.asFile.absolutePath}/external/bgfx/.build/${rootProject.ext.platform}-${rootProject.ext.arch}/bin"
        ]
    } else if (rootProject.ext.platform == "linux") {
        jvmArgs = ["-Djava.library.path=" +
           "${layout.buildDirectory.asFile.get().absolutePath}/libs:" +
           "${rootProject.layout.projectDirectory.asFile.absolutePath}/external/bgfx/.build/linux64_gcc/bin"
        ]
    }
}


test {
    if (rootProject.ext.platform == "windows") {
        var nativePaths = [
                "${layout.buildDirectory.asFile.get().absolutePath}/libs",
                "${rootProject.layout.projectDirectory.asFile.absolutePath}/external/bgfx/.build/win64_vs2022/bin"
        ]
        systemProperty("java.library.path", nativePaths.join(";"))
    } else if (rootProject.ext.platform == "osx") {
        var nativePaths = [
                "${layout.buildDirectory.asFile.get().absolutePath}/libs",
                "${rootProject.layout.projectDirectory.asFile.absolutePath}/external/bgfx/.build/${rootProject.ext.platform}-${rootProject.ext.arch}/bin"
        ]
        systemProperty("java.library.path", nativePaths.join(":"))
    } else if (rootProject.ext.platform == "linux") {
        var nativePaths = [
                "${layout.buildDirectory.asFile.get().absolutePath}/libs",
                "${rootProject.layout.projectDirectory.asFile.absolutePath}/external/bgfx/.build/linux64_gcc/bin"
        ]
        systemProperty("java.library.path", nativePaths.join(":"))
    }
}
